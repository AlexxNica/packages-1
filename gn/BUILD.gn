# Copyright 2016 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/fuchsia/bootdata.gni")
import("//build/toolchain/clang_toolchain.gni")
import("//packages/gn/packages.gni")

declare_args() {
  # path to autorun script
  autorun = ""

  # Manifest files describing target libraries from toolchains.
  # TODO(TO-471): This is ignored as a build argument and overridden below.
  toolchain_manifests = [ "${clang_prefix}/../lib/${clang_target}.manifest" ]

  # Groups to include from the Zircon /boot manifest into /boot.
  # This is either "all" or a comma-separated list of one or more of:
  #   core -- necessary to boot
  #   misc -- utilities in /bin
  #   test -- test binaries in /bin and /test
  zircon_boot_groups = "core"

  # A list of labels for `bootdata` targets (see //build/bootdata.gni)
  # to roll into the final bootable image.  These targets must use the
  # default `output_name` and `output_extension`.
  extra_bootdata = []

  # File containing kernel command line arguments to roll into the
  # bootdata image used for booting.
  kernel_cmdline_file = ""

  # A list of platforms, i.e. different Zircon kernels that were built.
  # There will be a different `bootdata-${platform}.bin` built for each.
  # TODO(mcgrathr): Change defaults to short names after
  # https://fuchsia-review.googlesource.com/c/zircon/+/90530 lands.
  if (target_cpu == "x64") {
    zircon_platforms = [ "zircon-pc-x86-64" ]
  } else {
    zircon_platforms = [ "zircon-qemu-arm64" ]
  }

  # Build a large ramdisk image based on `system.manifest` into `user.bootfs`.
  build_ramdisk = true

  # The package key to use for signing the system package. New keys can be
  # generated with the `pm` host command.
  system_package_key = "//packages/development.key"

  # The size of the minfs data partition image to create. Normally this image
  # is added to FVM, and can therefore expand as needed. It must be at least
  # 10mb (the default) in order to be succesfully initialized.
  data_image_size = "10m"
}

declare_args() {
  # Groups to include from the Zircon /boot manifest into /system
  # (instead of into /boot like Zircon's own bootdata.bin does).
  # Should not include any groups that are also in zircon_boot_groups,
  # which see.  If zircon_boot_groups is "all" then this should be "".
  if (zircon_boot_groups == "all") {
    zircon_system_groups = ""
  } else {
    # TODO(mcgrathr): Could default to "" for !is_debug, or "production
    # build".  Note including "test" here places all of Zircon's tests
    # into /system/test, which means that Fuchsia bots run those tests
    # too.
    zircon_system_groups = "misc,test"
  }
}

if (zircon_boot_groups == "all") {
  assert(zircon_system_groups == "",
         "zircon_boot_groups already has everything")
} else {
  assert(zircon_system_groups != "all" && zircon_system_groups != "core",
         "zircon_system_groups cannot include core (or all)")
}

# TODO(TO-471): The toolchain package will provide this file
# but it doesn't yet, so generate it with this kludge.
toolchain_manifests[0] = "${root_out_dir}/clang_toolchain.manifest"
action("generate_clang_toolchain_manifest") {
  script = "toolchain_manifest.py"
  outputs = [
    toolchain_manifests[0],
  ]
  inputs = [
    "${clang_prefix}/clang",
  ]
  args = [
    "--output",
    rebase_path(outputs[0]),
    "--prefix=$clang_prefix",
    "--target=$clang_target",
    "libc++.so.2",
    "libc++abi.so.1",
    "libunwind.so.1",
    "asan/libc++.so.2",
    "asan/libc++abi.so.1",
    "asan/libunwind.so.1",
    "libclang_rt.asan-${clang_cpu}.so",
    "libclang_rt.ubsan_standalone-${clang_cpu}.so",
  ]
}

# Permit dependencies on testonly targets from packages.
testonly = true

if (current_cpu == "x64") {
  zircon_cpu = "x86-64"
} else {
  zircon_cpu = current_cpu
}

zircon_boot_manifest =
    "//out/build-zircon/build-user-${zircon_cpu}/bootfs.manifest"
zircon_ulib_manifest =
    "//out/build-zircon/build-user-${zircon_cpu}-ulib/bootfs.manifest"

zircon_devmgr_require_system_manifest = "require_system.manifest"

final_boot_manifest = "$root_out_dir/boot.manifest"
final_system_manifest = "$root_out_dir/system.manifest"

# Keep the following in sync with the values in
#   //scripts/devshell/lib/image_build_vars.sh
images_dir = "$root_out_dir/images"
efi_image_path = "$images_dir/efi.blk"
system_package_dir = "$root_gen_dir/system.pkg"
system_package_meta_far = "$system_package_dir/meta.far"
system_package_cmdline = "$images_dir/cmdline.txt"
blobstore_image_path = "$images_dir/blobstore.blk"
data_image_path = "$images_dir/data.blk"
fvm_image_path = "$images_dir/fvm.blk"
fvm_sparse_image_path = "$images_dir/fvm.sparse.blk"

action("finalize_manifests") {
  visibility = [ ":*" ]

  packages_file = "$target_gen_dir/packages"
  system_manifest_file = "$target_gen_dir/system.bootfs.manifest"
  build_id_file = "$root_out_dir/ids.txt"

  deps = exec_script("process_modules.py",
                     [
                       "--packages",
                       rebase_path(packages_file),
                       "--system-manifest",
                       rebase_path(system_manifest_file),
                       "--modules",
                       fuchsia_packages,
                       "--build-root",
                       rebase_path(root_build_dir),
                       "--arch",
                       target_cpu,
                     ],
                     "list lines",
                     rebase_path(packages_imported))
  package_list = read_file(packages_file, "list lines")

  script = "finalize_manifests.py"
  inputs = [
    "elfinfo.py",
    "manifest.py",
    "variant.py",
  ]

  depfile = "$root_out_dir/finalize_manifests.d"
  outputs = [
    final_boot_manifest,
    final_system_manifest,
    build_id_file,
  ]

  sources = []
  args = [
    "--depfile=" + rebase_path(depfile, root_build_dir),
    "--build-id-file=" + rebase_path(build_id_file, root_build_dir),
  ]

  # First the toolchain and Zircon "ulib" manifests are pure auxiliaries:
  # they just supply libraries that might satisfy dependencies.

  # TODO(TO-471): Remove this when toolchain_manifests are in the source tree.
  deps += [ ":generate_clang_toolchain_manifest" ]

  sources += toolchain_manifests
  foreach(manifest, toolchain_manifests) {
    manifest_cwd = get_path_info(rebase_path(manifest), "dir")
    args += [
      "--cwd=$manifest_cwd",
      "--manifest=" + rebase_path(manifest),
    ]
  }

  sources += [ zircon_ulib_manifest ]
  zircon_manifest_cwd = rebase_path("//out/build-zircon")
  args += [
    "--cwd=$zircon_manifest_cwd",
    "--manifest=" + rebase_path(zircon_ulib_manifest),
  ]

  # Next, everything that will go into the final /boot manifest.
  args += [ "--output=" + rebase_path(final_boot_manifest, root_build_dir) ]

  sources += [ zircon_boot_manifest ]
  args += [
    "--cwd=$zircon_manifest_cwd",
    "--groups=$zircon_boot_groups",
    "--manifest=" + rebase_path(zircon_boot_manifest),

    # Add our devmgr configuration file
    "--cwd=" + rebase_path("."),
    "--manifest=" + rebase_path(zircon_devmgr_require_system_manifest),

    # All the manifests generated by this build are relative to root_build_dir.
    "--cwd=.",
    "--groups=all",
  ]

  # Finally, everything that will go into the final /system manifest.
  args += [
    "--output=" + rebase_path(final_system_manifest, root_build_dir),
    "--cwd=$zircon_manifest_cwd",
    "--groups=$zircon_system_groups",
    "--manifest=" + rebase_path(zircon_boot_manifest),

    # All the manifests generated by this build are relative to root_build_dir.
    "--cwd=.",
    "--groups=all",
  ]

  if (autorun != "") {
    autorun_manifest = "$target_gen_dir/autorun.manifest"
    write_file(autorun_manifest, [ "autorun=$autorun" ])
    sources += [ autorun_manifest ]
    args += [ "--manifest=" + rebase_path(autorun_manifest) ]
  }

  # TODO(mcgrathr,jamesr): When process_modules.py drops support for
  # package JSON files adding files directly, this can go away.
  # GN won't let us make it a source because it's in the build directory
  # but is written implicitly at gen time rather than by a proper action.
  # We're relying on the depfile to notice its changes.
  #sources += [ system_manifest_file ]
  args += [ "--manifest=" + rebase_path(system_manifest_file) ]

  foreach(package, package_list) {
    package_manifest = "$root_build_dir/package/$package/system_manifest"

    # GN won't let us make these sources because they're in the build
    # directory but written implicitly at gen time rather than by a proper
    # action.  We're relying on the depfile to notice their changes.
    #sources += [ package_manifest ]

    args += [ "--optional-manifest=" + rebase_path(package_manifest) ]
  }

  foreach(package, package_list) {
    package_manifest = "$root_build_dir/package/$package/archive_manifest"
    final_manifest = "$root_build_dir/package/$package/final_archive_manifest"

    # GN won't let us make these sources because they're in the build
    # directory but written implicitly at gen time rather than by a proper
    # action.  We're relying on the depfile to notice their changes.
    #sources += [ package_manifest ]

    outputs += [ final_manifest ]
    args += [
      "--standalone-output=" + rebase_path(final_manifest, root_build_dir),
      "--manifest=" + rebase_path(package_manifest),
    ]
  }
}

action("system.pkg") {
  visibility = [ ":*" ]
  pm_label = "//garnet/go/src/pm:pm_bin($host_toolchain)"
  pkgsvr_label = "//garnet/go/src/pm:pkgsvr_bin"
  deps = [
    ":finalize_manifests",
    pkgsvr_label,
    pm_label,
  ]

  pm_out_dir = get_label_info(pm_label, "root_out_dir")
  pkgsvr_out_dir = get_label_info(pkgsvr_label, "root_out_dir")

  pm_bin = "$pm_out_dir/pm"
  pkgsvr_bin = "$pkgsvr_out_dir/pkgsvr"
  merkleroot_bin = "//out/build-zircon/tools/merkleroot"

  inputs = [
    merkleroot_bin,
    pkgsvr_bin,
    pm_bin,
    system_package_key,
  ]

  script = "//build/gn_run_binary.sh"
  args = [
    clang_prefix,
    rebase_path("system_package.py"),
    "--system-manifest",
    rebase_path(final_system_manifest),
    "--system-package-dir",
    rebase_path(system_package_dir),
    "--system-package-key",
    rebase_path(system_package_key),
    "--pm",
    rebase_path(pm_bin),
    "--pkgsvr",
    rebase_path(pkgsvr_bin),
    "--merkleroot",
    rebase_path(merkleroot_bin),
    "--commandline",
    rebase_path(system_package_cmdline),
  ]
  sources = [
    final_system_manifest,
  ]
  outputs = [
    system_package_cmdline,
    system_package_dir,
    system_package_meta_far,
  ]
}

action("blobstore.blk") {
  visibility = [ ":*" ]
  blobstore_bin = "//out/build-zircon/tools/blobstore"

  script = "//build/gn_run_binary.sh"
  args = [
    clang_prefix,
    rebase_path("blobstore.py"),
    "--blobstore",
    rebase_path(blobstore_bin),
    "--image",
    rebase_path(blobstore_image_path),
    "--manifest",
    rebase_path(final_system_manifest),
    "--add",
    rebase_path(system_package_meta_far),
  ]
  sources = [
    final_system_manifest,
    system_package_meta_far,
  ]
  inputs = [
    blobstore_bin,
  ]
  outputs = [
    blobstore_image_path,
  ]
  deps = [
    ":finalize_manifests",
    ":system.pkg",
  ]
}

if (kernel_cmdline_file != "") {
  bootdata_cmdline("kernel_cmdline") {
    visibility = [ ":*" ]
    inputs = [
      kernel_cmdline_file,
    ]
  }
}

bootdata_cmdline("systempkg_cmdline") {
  visibility = [ ":*" ]
  inputs = [
    system_package_cmdline,
  ]
  deps = [
    ":system.pkg",
  ]
}

# Package up the /boot filesystem along with Zircon's kernel bootdata.
# This `bootdata.bin` along with the Zircon kernel is enough to boot.
foreach(platform, zircon_platforms) {
  bootdata("bootdata-${platform}") {
    deps = [
      ":finalize_manifests",
    ]
    kernel_build_dir = "//out/build-zircon/build-${platform}"
    inputs = [
      "$kernel_build_dir/kernel-bootdata.bin",
      final_boot_manifest,
    ]
    boot = true
    if (kernel_cmdline_file != "") {
      deps += [ ":kernel_cmdline" ]
      inputs += get_target_outputs(":kernel_cmdline")
    }
  }

  bootdata("bootdata-blobstore-${platform}") {
    deps = [
      ":bootdata-${platform}",
      ":systempkg_cmdline",
    ]
    inputs = get_target_outputs(":systempkg_cmdline")

    foreach(label, deps) {
      inputs += get_target_outputs(label)
    }
  }
}

# Package up the /system filesystem.
bootdata("system_bootfs") {
  deps = [
    ":finalize_manifests",
  ]
  inputs = [
    final_system_manifest,
  ]
}

# data.blk creates an empty but initialized minfs data partition. The partition
# is included in fvm.blk and fvm-sparse.blk so that they contain the start of a
# data partition, without which /data would not be mounted on target.
action("data.blk") {
  minfs_path = "//out/build-zircon/tools/minfs"
  inputs = [
    minfs_path,
  ]

  sized_path = rebase_path(data_image_path)
  sized_path = "${sized_path}@${data_image_size}"

  script = "//build/gn_run_binary.sh"
  args = [
    clang_prefix,
    rebase_path(minfs_path),
    sized_path,
    "create",
  ]
  outputs = [
    data_image_path,
  ]
}

# fvm.blk creates a non-sparse FVM partition image containing the blobstore
# partition produced by blobstore.blk and the data partition produced by
# data.blk. fvm.blk is primarily invoked and used by the qemu run, via `fx
# run-fvm`.
action("fvm.blk") {
  visibility = [ ":*" ]
  fvm_path = "//out/build-zircon/tools/fvm"
  inputs = [
    blobstore_image_path,
    data_image_path,
    fvm_path,
  ]
  deps = [
    ":blobstore.blk",
    ":data.blk",
  ]

  script = "//build/gn_run_binary.sh"
  args = [
    clang_prefix,
    rebase_path(fvm_path),
    rebase_path(fvm_image_path),
    "create",
    "--blobstore",
    rebase_path(blobstore_image_path),
    "--data",
    rebase_path(data_image_path),
  ]
  outputs = [
    fvm_image_path,
  ]
}

# fvm.sparse.blk creates a sparse FVM partition image containing the blobstore
# partition produced by blobstore.blk and the data partition produced by
# data.blk. fvm.sparse.blk is primarily invoked and used by the paver boot, via
# `fx boot-paver`.
action("fvm.sparse.blk") {
  visibility = [ ":*" ]
  fvm_path = "//out/build-zircon/tools/fvm"
  inputs = [
    blobstore_image_path,
    data_image_path,
    fvm_path,
  ]
  deps = [
    ":blobstore.blk",
    ":data.blk",
  ]

  script = "//build/gn_run_binary.sh"
  args = [
    clang_prefix,
    rebase_path(fvm_path),
    rebase_path(fvm_sparse_image_path),
    "sparse",
    "--blobstore",
    rebase_path(blobstore_image_path),
    "--data",
    rebase_path(data_image_path),
  ]
  outputs = [
    fvm_sparse_image_path,
  ]
}

# efi.blk is a partition image containing a a kernel and bootdata image, plus,
# if appropriate, a bootloader. This target is not consumed by the default
# build, but instead may be invoked by tools from //scripts and elsewhere that
# need an EFI partition image.
action("efi.blk") {
  bootdata_label = ":bootdata-blobstore-${zircon_platforms[0]}"
  deps = [
    bootdata_label,
  ]

  bootdata_bins = get_target_outputs(bootdata_label)
  bootdata_bin = bootdata_bins[0]
  assert([ bootdata_bin ] == bootdata_bins)

  kernel_build_dir = "//out/build-zircon/build-${zircon_platforms[0]}"
  mkfs_msdosfs_bin = "//out/build-zircon/tools/mkfs-msdosfs"
  zircon_bin = "$kernel_build_dir/zircon.bin"

  inputs = [
    mkfs_msdosfs_bin,
    zircon_bin,
  ]
  inputs += get_target_outputs(bootdata_label)

  script = "//build/gn_run_binary.sh"
  args = [
    clang_prefix,
    rebase_path("efi.py"),
    "--output",
    rebase_path(efi_image_path),
    "--mkfs-msdosfs",
    rebase_path(mkfs_msdosfs_bin),
    "--zircon",
    rebase_path(zircon_bin),
    "--bootdata",
    rebase_path(bootdata_bin),
  ]

  if (target_cpu == "x64") {
    gigaboot_bin = "$kernel_build_dir/bootloader/bootx64.efi"
    args += [
      "--efi-bootloader",
      rebase_path(gigaboot_bin),
    ]
    inputs += [ gigaboot_bin ]
  }

  outputs = [
    efi_image_path,
  ]
}

# DEPRECATED
# Roll those together into the image for booting with /system from RAM disk.
bootdata("mkbootfs") {
  output_name = "user"
  output_extension = "bootfs"
  deps = [
    ":bootdata-${zircon_platforms[0]}",
    ":system_bootfs",
  ]
  inputs = []
  foreach(label, deps) {
    inputs += get_target_outputs(label)
  }
  deps += extra_bootdata
  foreach(label, extra_bootdata) {
    # get_target_outputs only works on labels defined in the same file.
    # So just assume each `bootdata` target used the defaults so its
    # output file is computable directly from the target name.
    inputs += [ "$root_out_dir/" + get_label_info(label, "name") + ".bin" ]
  }
}

group("default") {
  if (build_ramdisk) {
    # TODO(mcgrathr): Remove dep when deprecated user.bootfs is gone.
    deps = [
      ":mkbootfs",
      ":system_bootfs",
    ]
    foreach(platform, zircon_platforms) {
      deps += [ ":bootdata-${platform}" ]
    }
  } else {
    deps = [
      ":blobstore.blk",
    ]
    foreach(platform, zircon_platforms) {
      deps += [ ":bootdata-blobstore-${platform}" ]
    }
  }
}
